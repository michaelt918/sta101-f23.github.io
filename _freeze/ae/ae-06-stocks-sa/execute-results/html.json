{
  "hash": "9959e6e156a768d9f9c2d64d9b846685",
  "result": {
    "markdown": "---\ntitle: \"Apple and Microsoft stock prices\"\ncategories: \n  - Application exercise\n  - Suggested answers\neditor: visual\n---\n\n\n::: callout-important\nThese are suggested answers for the application exercise. They're not necessarily complete or 100% accurate, they're roughly what we develop in class while going through the exercises.\n:::\n\nToday we'll explore the question \"How do stock prices of Apple and Microsoft relate to each other?\"\n\n# Goals\n\n-   Understand the grammar of linear modeling, including $y$, $x$, $b$, $e$ fitted estimates and residuals\n\n-   Add linear regression plots to your 2D graphs\n\n-   Write a simple linear regression model mathematically\n\n-   Fit the model to data in R in a `tidy` way\n\n# Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\n```\n:::\n\n\n# Data\n\nThe data for this application exercise was originally gathered using the [**tidyquant**](https://business-science.github.io/tidyquant/) R package. It features Apple and Microsoft stock prices from January 1st 2020 to December 31st 2021.\n\nFirst, let's load the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstocks <- read_csv(\"data/stocks.csv\")\n```\n:::\n\n\nTo keep things simple, we'll work with a subset of the data, stock prices in January 2020.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstocks_jan2020 <- stocks |>\n  filter(month(date) == 1 & year(date) == 2020)\n```\n:::\n\n\n# Models and residuals\n\n## Exercise 1\n\nAt first, you might be tempted to minimize $\\sum_i e_i$, the sum of all residuals, but this is problematic. Why? Can you come up with a better solution (other than the one listed below)?\n\n> -   Large positive residuals would cancel with large negative residuals.\n>\n> -   We could minimize the sum of the absolute value of the residuals.\n\n## Minimize the sum of squared residuals\n\nIn practice, we minimize the **sum of squared residuals**:\n\n$$\n\\sum_i e_i^2\n$$\n\nNote, this is the same as\n\n$$\n\\sum_i (y_i - \\hat{y}_i)^2\n$$\n\n## Exercise 2\n\nCheck out an interactive visualization of \"least squares regression\" [here](https://seeing-theory.brown.edu/regression-analysis/index.html#section1). Click on `I` and drag the points around to get started. Describe what you see.\n\n> Each square is a \"square residual\". The line minimizes the sum of squared residuals, (i.e. it minimizes the total area of squares I see on the screen).\n>\n> This is called \"Ordinary Least Squares\" (OLS) regression.\n\n# Plotting the least squares regression line\n\nPlotting the OLS regression line, that is, the line that minimizes the sum of square residuals takes one new geom. Simply add\n\n```         \ngeom_smooth(method = \"lm\", se = FALSE)\n```\n\nto your plot.\n\n`method = \"lm\"` says to draw a line according to a \"linear model\" and `se = FALSE` turns off standard error bars. You can try without these options for comparison.\n\nOptionally, you can change the color of the line, e.g.\n\n```         \ngeom_smooth(method = '\"lm\", se = FALSE, color = \"red\")\n```\n\n## Exercise 4\n\nIn the slides we fit a model with slope 0.5 and intercept -5. The code for layering the line that represents the model over your data is given below. Add `geom_smooth()` as described above with `color = \"steelblue\"` to see how close your line is.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(stocks_jan2020, aes(x = MSFT.Open, y = AAPL.Open)) +\n  geom_point() + \n  geom_abline(slope = 0.5, intercept = -5) +\n  geom_smooth(method = \"lm\", se = F, color = \"steelblue\") +\n  labs(\n    x = \"MSFT Open\", \n    y = \"AAPL Open\", \n    title = \"Open prices of MSFT and AAPL\",\n    subtitle = \"January 2020\"\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ae-06-stocks-sa_files/figure-html/how-close-1.png){width=672}\n:::\n:::\n\n\n# Finding $\\hat{\\beta}$\n\nTo **fit the model** in R, i.e. to \"find $\\hat{\\beta}$\", use the code below as a template:\n\n```         \nmodel_fit <- linear_reg() |>\n  fit(y ~ x, data = dataframe)\n```\n\n-   `linear_reg` tells `R` we will perform linear regression\n-   `fit` defines the outcome $y$, predictor $x$ and the data set\n\nRunning the code above, but replacing the arguments of the `fit` command appropriately will create a new object called `model_fit` that stores all information about your fitted model.\n\nTo access the information, you can run, e.g.\n\n```         \ntidy(model_fit)\n```\n\nLet's try it out.\n\n## Exercise 5\n\nFind the least squares line $y = \\hat{\\beta_0} + \\hat{\\beta_1} x$ for January 2020, where $x$ is Microsoft's opening price and $y$ is Apple's opening price. Display a tidy summary of your model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstock_fit <- linear_reg() |>\n  fit(AAPL.Open ~ MSFT.Open, data = stocks_jan2020)\n\ntidy(stock_fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 Ã— 5\n  term        estimate std.error statistic      p.value\n  <chr>          <dbl>     <dbl>     <dbl>        <dbl>\n1 (Intercept)    3.31     8.87       0.373 0.713       \n2 MSFT.Open      0.454    0.0541     8.40  0.0000000808\n```\n\n\n:::\n:::\n\n\n## Exercise 6\n\nRe-write the fitted equation replacing $\\hat{\\beta}_0$ and $\\hat{\\beta}_1$ with the estimates from the model you fit in the previous exercise.\n\n> My fitted model is:\n>\n> $$\n> \\hat{y} = 3.3117408 + 0.4542263 x\n> $$\n>\n> where $\\hat{y}$ is the predicted Apple open price and $x$ is the open price of Microsoft.\n\n## Exercise 7\n\nInterpret $\\hat{\\beta}_0$ and $\\hat{\\beta}_1$ in context of the data.\n\n> $\\hat{\\beta_0} = 3.3117408$\n>\n> It's the price of APPL if MSFT opened at 0.\n>\n> $\\hat{\\beta_1} = 0.4542263$.\n>\n> For every dollar increase in MSFT open price, we expect AAPL open price to increase by .45.\n\n## Bonus exercise\n\nSay Microsoft opens at 166 dollars. What do I predict the opening price of AAPL to be?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyhat <- 3.3117408 + (0.4542263 * 166)\nyhat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 78.71331\n```\n\n\n:::\n:::\n",
    "supporting": [
      "ae-06-stocks-sa_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}