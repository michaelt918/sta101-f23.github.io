{
  "hash": "f989e06c4f266d3614ea7a51598eba2a",
  "result": {
    "markdown": "---\ntitle: \"Correlation and Covariance\"\nsubtitle: \"STA 101\"\nformat: html\n---\n\n\n\n## Bulletin\n\n- Final project due date updated (see announcement)\n- Course evaluations. $>80\\%$ response $\\rightarrow$ +1pt final project. \n- If $>80\\%$ TA evals, another 0.5 points.\n\n## Getting started\n\nDownload this application exercise by pasting the code below into your **console**\n\n```\ndownload.file(\"https://sta101-fa22.netlify.app/static/appex/ae26.qmd\",\ndestfile = \"ae26.qmd\")\n```\n\n## Load packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(ellipse)\n```\n:::\n\n\n# Today\n\nBy the end of today, you will...\n\n- understand correlation and covariance matrix representations\n- visualize geometric intuition\n\n## Covariance and correlation\n\nEmpirical covariance between two variables\n\n$$\nCov(X,Y) = \\frac{1}{n-1} \\sum_{i = 1}^{n} (x_i - \\bar{x})(y_i - \\bar{y})\n$$\nLater in this application exercise we write $\\sigma_{xy}^2$ as the **covariance** between x and y.\n\n\nEmpirical correlation between two variables,\n\n$$\np_{XY} = \\frac{Cov(X,Y)}{\\sigma_X \\sigma_Y}\n$$\nwhere $\\sigma_X$ and $\\sigma_Y$ are the standard deviation of X and Y respectively.\n\n\n#### Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nx = c(1, 2, 3, 4, 5)\ny = c(0.5, 3, 2.2, 5, 5.5)\n\ndf = data.frame(x, y)\nfit1 = linear_reg() %>%\n  set_engine(\"lm\") %>%\n  fit(y ~ x, data = df)\nr2 = glance(fit1)$r.squared\n\ncat(\"Correlation between x and y: \", cor(x,y),\n    \"\\nCovariance between x and y: \", cov(x,y),\n    \"\\nStandard deviation of x: \", sd(x),\n    \"\\nStandard deviation of y: \", sd(y),\n    \"\\nR squared: \", r2\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCorrelation between x and y:  0.9243906 \nCovariance between x and y:  3 \nStandard deviation of x:  1.581139 \nStandard deviation of y:  2.052559 \nR squared:  0.854498\n```\n:::\n:::\n\n\n#### [Guess that correlation!](https://www.rossmanchance.com/applets/2021/guesscorrelation/GuessCorrelation.html)\n\n## Data\n\n`Hawks` is a subset of a data set by the same name in the `Stat2Data` package. Today we will focus on the following measurements of 891 hawks:\n\n- `Species`: CH = cooper's, RT = red-tailed, SS = sharp-shinned\n- `Weight`: body weight in grams\n- `Wing`: length in mm of primary wing feather from tip to wrist it attaches to\n- `Culmen`: length in mm of the upper bill from the tip to where it bumps into the fleshy part of the bird\n- `Hallux`: length in mm of the killing talon\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHawks = read_csv(\"https://sta101-fa22.netlify.app/static/appex/data/Hawks.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(Hawks)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 891\nColumns: 5\n$ Species <chr> \"RT\", \"RT\", \"CH\", \"SS\", \"RT\", \"RT\", \"RT\", \"RT\", \"RT\", \"RT\", \"R…\n$ Weight  <dbl> 920, 990, 470, 170, 1090, 960, 855, 1210, 1120, 1010, 1010, 11…\n$ Wing    <dbl> 385, 381, 265, 205, 412, 370, 375, 412, 405, 393, 371, 390, 41…\n$ Culmen  <dbl> 25.7, 26.7, 18.7, 12.5, 28.5, 25.3, 27.2, 29.3, 26.0, 26.3, 25…\n$ Hallux  <dbl> 30.1, 31.3, 23.5, 14.3, 32.2, 30.1, 30.0, 31.3, 30.2, 30.8, 29…\n```\n:::\n:::\n\n\n\n## Examples\n\n### Two measurements\n\nLet's look at weight and wing length.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHawks %>%\n  ggplot(aes(x = Weight, y = Wing)) +\n  geom_point() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](ae26_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Standardize data\nHawks2 = Hawks %>%\n  mutate(sWeight = (Weight - mean(Weight)) / sd(Weight),\n         sWing = (Wing - mean(Wing)) / sd(Wing))\n\nHawks2 %>%\n  ggplot(aes(x = sWeight, y = sWing)) +\n  geom_point() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](ae26_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\nHow can we describe the variability of the data? \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Covariance matrix\ncovMatrix1 = Hawks %>%\n  select(Weight, Wing) %>%\n  cov()\n\ncovMatrix1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Weight      Wing\nWeight 214310.57 41247.975\nWing    41247.97  9085.273\n```\n:::\n\n```{.r .cell-code}\ncovMatrix2 = Hawks2 %>%\n  select(sWeight, sWing) %>%\n  cov()\n\ncovMatrix2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          sWeight     sWing\nsWeight 1.0000000 0.9347852\nsWing   0.9347852 1.0000000\n```\n:::\n:::\n\n\nCovariance matrix $\\Sigma$ collects variances and covariances together,\n\n$$\n\\Sigma = \\begin{pmatrix}\\sigma_x^2 & \\sigma_{xy}^2\\\\\\ \\sigma_{xy}^2 & \\sigma_y^2\\end{pmatrix}\n$$\nHow can we visualize the covariance matrix above?\n\n- offline example of matrix multiplication\n\nThe \"matrix inverse\" helps. The inverse of $\\Sigma$ is denoted $\\Sigma^{-1}$. The property of the inverse is:\n\n$$\n\\Sigma^{-1} \\Sigma = \\begin{pmatrix}1 & 0\\\\\\ 0 & 1 \\end{pmatrix}\n$$\n\n\n$$\nz^T \\Sigma^{-1} z = c^2\n$$\n\nwhere $z = (x, y)$ and $\\Sigma^{-1} = \\begin{pmatrix}s_x^2 & s_{xy}^2\\\\\\ s_{xy}^2 & s_y^2\\end{pmatrix}$. Where have we seen this before? Hint: `?pnorm` or see [multivariate normal](https://en.wikipedia.org/wiki/Multivariate_normal_distribution)\n\n$$\n\\begin{pmatrix} x & y\\end{pmatrix} \n\\begin{pmatrix}s_x^2 & s_{xy}^2\\\\\\ s_{xy}^2 & s_y^2\\end{pmatrix}\n\\begin{pmatrix} x\\\\\\ y \\end{pmatrix}\n= c^2\n$$\n\n$$\n(x s_x^2 + y s_{xy}^2 \\ \\ \\ \\ x s_{xy}^2 + y s_y^2) \\begin{pmatrix} x\\\\\\ y \\end{pmatrix} = c^2\n$$\n\n$$\nx^2 s_x^2 + 2x y \\cdot s_{xy}^2 + y^2 s_y^2 = c^2\n$$\nThis is the equation of an ellipse.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Grab the points (x,y) that satisfy the equation above\nellipsePoints = data.frame(ellipse(covMatrix2))\n\nHawks2 %>%\n  ggplot(aes(x = sWeight, y = sWing, color = Species)) +\n  geom_point() +\n  theme_bw() +\n  geom_point(aes(x = sWeight, y = sWing), data = ellipsePoints, color = 'steelblue')\n```\n\n::: {.cell-output-display}\n![](ae26_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nSet $c^2 = 6$:\n\nTo make sure the function `ellipse` above is doing what we expect:\n\n- First we get $\\Sigma^{-1}$:\n\n::: {.cell}\n\n```{.r .cell-code}\nsolve(covMatrix2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          sWeight     sWing\nsWeight  7.925401 -7.408548\nsWing   -7.408548  7.925401\n```\n:::\n:::\n\n\nNext, we manually solve the quadratic equation using the quadratic formula:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetCoordinate = function(y, s1, s2, s12) {\n  A = s1\n  B = 2*y*s12\n  C = (y*s2) - 6\n  p1 = -1*B\n  p2 = sqrt(B^2 - (4*A*C))\n  p3 = 2*A\n  \n  coord1 = (p1 + p2) / p3\n  coord2 = (p1 - p2) / p3\n  return(c(coord1, coord2))\n}\n\ngetCoordinate(1, 7.925401, 7.925401, -7.408548)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.7290667 0.1405038\n```\n:::\n:::\n\n\nThe axes of the ellipse provide the most informative directions to measure the data. In $n$-dimensions, where we have a $n$-dimensional ellipsoid, it can be useful to look at $p<n$ axes. The largest $p$ axes are called the \"principal components\".\n\n- Example of \"principle component analysis\" in action: [genes mirror geography within Europe](https://www.nature.com/articles/nature07331) and [an associated news article](https://www.nationalgeographic.com/science/article/european-genes-mirror-european-geography) discussing the work.\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "ae26_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}