{
  "hash": "4d4f7750b16f9876f7f17b0e91bee1f5",
  "result": {
    "markdown": "---\ntitle: \"Exploratory Data Analysis II\"\nsubtitle: \"STA 101\"\nformat: html\n---\n\n\n## Bulletin\n\n-   lab 1 due tonight at 11:59pm on Gradescope\n-   be sure to complete prepare material (on the [schedule](https://sta101-fa22.netlify.app/static/schedule/schedule.html)) before each class\n\n## Today\n\nBy the end of today you will...\n\n-   Learn and practice the big 7 `dplyr` verbs\n\n## Getting started\n\nDownload this application exercise by pasting the code below into your **console** (bottom left of screen)\n\n    download.file(\"https://sta101-fa22.netlify.app/static/appex/ae4.qmd\",\n      destfile = \"ae4.qmd\")\n\n## Load packages and data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n```\n:::\n\n\nType `?palmerpenguins` to learn more about this package. Or better yet, check it out [here](https://allisonhorst.github.io/palmerpenguins/).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(penguins)\n```\n:::\n\n\n## A package within a package...\n\nWhen we load the `tidyverse` library, `dplyr` is packaged with it.\n\n[dplyr](https://dplyr.tidyverse.org/), a grammar of data manipulation offers intuitive 'verb' functions that describe actions we commonly want to perform with data. The big 7 we'll cover today are:\n\n-   `mutate()` adds new variables (columns) that are functions of existing variables\n-   `select()` picks variables based on their names.\n-   `filter()` picks rows based on their values in specific columns.\n-   `group_by()` sets us up to summarize across groups\n-   `summarize()` reduces multiple values down to a single summary.\n-   `arrange()` changes the ordering of the rows.\n-   `slice()` select, remove and duplicate rows based on their index\n\n(as described at <https://dplyr.tidyverse.org/>)\n\n-   Check out documentation with `?`\n\n### Mutate\n\n- `mutate()` adds new variables (columns) that are functions of existing variables\n\nApproximate bill area (in $m^2$) as bill length \\* bill depth:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  mutate(bill_area_mm2 = bill_length_mm * bill_depth_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 9\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 3 more variables: sex <fct>, year <int>, bill_area_mm2 <dbl>\n```\n:::\n:::\n\n\n### Select\n\n- `select()` picks variables (columns) based on their names.\n\nIt's hard to see bill length, depth and area in the same output, let's select a smaller subset of the variables to look at.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example 1\npenguins %>%\n  mutate(bill_area_mm2 = bill_length_mm * bill_depth_mm) %>%\n  select(-c(year, species, island, flipper_length_mm, body_mass_g, sex))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 3\n   bill_length_mm bill_depth_mm bill_area_mm2\n            <dbl>         <dbl>         <dbl>\n 1           39.1          18.7          731.\n 2           39.5          17.4          687.\n 3           40.3          18            725.\n 4           NA            NA             NA \n 5           36.7          19.3          708.\n 6           39.3          20.6          810.\n 7           38.9          17.8          692.\n 8           39.2          19.6          768.\n 9           34.1          18.1          617.\n10           42            20.2          848.\n# ℹ 334 more rows\n```\n:::\n\n```{.r .cell-code}\n# Example 2\npenguins %>%\n  mutate(bill_area_mm2 = bill_length_mm * bill_depth_mm) %>%\n  select(bill_length_mm, bill_depth_mm, bill_area_mm2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 3\n   bill_length_mm bill_depth_mm bill_area_mm2\n            <dbl>         <dbl>         <dbl>\n 1           39.1          18.7          731.\n 2           39.5          17.4          687.\n 3           40.3          18            725.\n 4           NA            NA             NA \n 5           36.7          19.3          708.\n 6           39.3          20.6          810.\n 7           38.9          17.8          692.\n 8           39.2          19.6          768.\n 9           34.1          18.1          617.\n10           42            20.2          848.\n# ℹ 334 more rows\n```\n:::\n:::\n\n\n\n## Filter\n\n- `filter()` picks rows based on their values in specific columns.\n\nLet's just examine penguins on Dream island\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  mutate(bill_area_mm2 = bill_length_mm * bill_depth_mm) %>%\n  select(-year)\n# code here\n```\n:::\n\n\n## Group by + Summarize\n\n- `group_by()` sets us up to summarize across groups\n- `summarize()` reduces multiple values down to a single summary.\n\n#### Exercise 2:\n\nFind mean bill area across sex. Fill in the blanks\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  mutate(bill_area_mm2 = bill_length_mm * bill_depth_mm) %>%\n  select(-year) %>%\n  # filter for Dream\n  group_by(___) %>%\n  summarize(mean_bill_area_mm2 = ___)\n```\n:::\n\n\n## Arrange + Slice\n\n- `arrange()` changes the ordering of the rows.\n- `slice()` select, remove and duplicate rows based on their index\n\nLet's use `arrange()` and `slice()` to report the five penguins with the greatest bill area.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  mutate(bill_area_mm2 = bill_length_mm * bill_depth_mm) %>%\n  select(bill_area_mm2, bill_length_mm) %>%\n  arrange(desc(bill_area_mm2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 2\n   bill_area_mm2 bill_length_mm\n           <dbl>          <dbl>\n 1         1127.           54.2\n 2         1105.           55.8\n 3         1076.           52  \n 4         1065.           53.5\n 5         1056            52.8\n 6         1050.           51.7\n 7         1043.           52.7\n 8         1032.           58  \n 9         1021.           51.3\n10         1013.           59.6\n# ℹ 334 more rows\n```\n:::\n:::\n\n\n#### Exercise 3:\n\nAre these the same five penguins with the longest bills?\n\nOptional hint: if you want to be exactly precise about which penguins are which, you could add an ID column, e.g.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n penguins %>%\n  mutate(id = seq(1:nrow(penguins)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 9\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 3 more variables: sex <fct>, year <int>, id <int>\n```\n:::\n:::\n\n\nThis takes advantage of the `nrow()` function. Can you guess what it returns?\n\n#### Exercise 4:\n\nCompute the average bill length, bill depth, flipper length and body mass across all islands.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code here\n```\n:::\n\n\n\n#### Optional bonus:\n\nIs every species on every island?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code here\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}