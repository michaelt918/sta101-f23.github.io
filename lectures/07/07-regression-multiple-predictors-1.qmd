---
title: Regression with multiple predictors
subtitle: Lecture 7
format: revealjs
auto-stretch: false
---

# Warm up

## Check-in

-   Daily check-ins for getting you thinking at the beginning of the class and reviewing recent/important concepts
-   Go to Canvas and open today's "quiz" titled `2023-09-25 Check-in`
-   Access code: `___` (released in class) <!-- influential point -->
-   "Graded" for completion

## Announcements

-   Lab 4 is due Thu, Sep 28 at 5 pm on Gradescope
-   Lab this week: Exam 1 review
-   Exam 1:
    -   In class - Wed, Oct 4
    -   Take home - Starts after in-class exam, ends Fri, Oct 6 at 5pm
    -   No lab on Fri, Oct 6

## Load packages and data

```{r load-libraroies, warning = F, message = F}
library(tidyverse)
library(tidymodels)
library(scatterplot3d)
```

# $R^2$ and model fit

## $R^2$

$R^2$, aka "the coefficient of determination" or "correlation squared" is a way to see how well a given model fits the data.

$$
R^2 = 1 - \frac{\sum_i r_i^2}{\sum_i (y_i - \bar{y})^2}
$$

where $\bar{y}$ is the **mean** of all *y* values.

## $R^2$, in words

$$
R^2 = 1 - \frac{\text{sum of squared residuals}}{\text{sum of outcome squared distance from the mean}}
$$

::: incremental
-   The sum of squared residuals is a measure of how wrong our model is (how much our model **doesn't** explain)
-   The denominator is proportional to the average square distance from the mean, i.e. the variance, i.e. the amount of variability in the data.
-   Together, the fraction represents the proportion of variability that is not explained by the model.
:::

## $R^2$

::: incremental
-   If the sum of squared residuals is 0, then the model explains all variability and $R^2 = 1 - 0 = 1$.

-   If the sum of squared residuals is the same as all the variability in the data, then model does not explain any variability and $R^2 = 1 - 1 = 0$.

-   $R^2$ is a measure of the proportion of variability the model explains. An $R^2$ of 0 is a poor fit and $R^2$ of 1 is a perfect fit.
:::

## Finding $R^2$

To find $R^2$ simply call the function `glance()` on your `model_fit`, e.g.

```{r}
#| eval: false

model_fit = linear_reg() |>
  fit(outcome ~ predictor, data = data_set)
  
glance(model_fit)
```

# Models with multiple predictors

## Two predictors {.smaller}

$$
y = \beta_0 + \beta_1 x_1 + \beta_2 x_2 + \epsilon
$$

::: incremental
-   $y$: the **outcome** variable. Also called the "response" or "dependent variable". In prediction problems, this is what we are interested in predicting.
-   $x_i$: the $i^{th}$ **predictor**. Also commonly referred to as "regressor", "independent variable", "covariate", "feature", "the data".
-   $\beta_i$: "constants" or **coefficients** i.e. fixed numbers. These are **population parameters**. $\beta_0$ has another special name, "the intercept".
-   $\epsilon$: the **error**. This quantity represents observational error, i.e. the difference between our observation and the true population-level expected value: $\beta_0 + \beta_1 x$.
-   Effectively this model says our data $y$ is linearly related to the $x_1$ and $x_2$ but is not perfectly observed due to some error.
:::

## A simple example

Let's examine the first quarter of 2020 high prices of Microsoft, IBM, and Apple stocks to illustrate some ideas.

```{r}
#| label: simple-example
#| echo: false
#| warning: false

stocks <- read_csv("data/stocks.csv")

stocks_subset <- stocks |>
  slice(1:62)

scatterplot3d(
  stocks_subset[,c("MSFT.High", "IBM.High", "AAPL.High")],
  pch = 19, 
  color="steelblue",
  xlab = "MSFT High $", 
  ylab = "IBM High $", 
  zlab = "AAPL High $"
) 
```

-   If we have three measurements (variables) then each observation is a point in three-dimensional space. In this example, we can choose one of our measurements to be the outcome variable (e.g. Apple stock price) and use our other two measurements (MSFT and IBM price) as predictors.

-   In general, the total number of measurements, i.e. variables (columns) in our linear model represents the spatial dimension of our model.

## 2 predictors + 1 outcome = 3 dimensions

-   Our fitted linear model no longer looks like a line, but instead looks like a **plane**.

-   This plane shows our prediction of AAPL price ($y$) given both MSFT price ($x_1$) and IBM price ($x_2$).

```{r}
#| label: simple-example-plane
#| echo: false
#| warning: false

plot3stocks <- scatterplot3d(
  stocks_subset[,c("MSFT.High", "IBM.High", "AAPL.High")],
  pch = 19, 
  color="steelblue",
  xlab = "MSFT High $", 
  ylab = "IBM High $", 
  zlab = "AAPL High $"
)

model <- lm(AAPL.High ~ MSFT.High + IBM.High, data = stocks_subset)
plot3stocks$plane3d(model, col = "darkred")
```

## Fitting a multiple regression model in R

Find the **equation of the plane** by adding in new predictors:

```{r}
#| eval: false

my_model_fit <- linear_reg() |>
  fit(outcome ~ predictor1 + predictor2 + predictor3 + ..., data = data-set-here)
```

. . .

-   This code template will fit the model according to the ordinary least squares (OLS) objective function, i.e., we are finding the equation of the hyperplane that minimizes the sum of squared residuals

. . .

-   You can then display a tidy output of the model with the `tidy()` function on your fitted model: `tidy(my_model_fit)`

## Application exercise

Go to Posit Cloud and start the project titled ae-07-Books.
